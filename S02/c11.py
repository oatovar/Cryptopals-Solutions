#!/usr/bin/env python3

from random import randrange, random
from Crypto.Cipher import AES

def generate_plaintext_padding() -> bytes:
    '''
    Generates 5-10 randomly generated bytes that will be used
    to prepend and append the text.

    returns bytes
    '''
    return bytes([randrange(0, 256) for _ in range(randrange(5, 11))])

def encryption_oracle(cleartext: bytes) -> bytes:
    '''
    The encryption oracle will encrypt the given cleartext
    using a randomly generated key.

    Returns the ciphertext bytes
    '''
    key = bytes([randrange(0, 256) for _ in range(16)])
    prefix = generate_plaintext_padding()
    suffix = generate_plaintext_padding()
    new_plaintext = prefix + cleartext + suffix

    if random() > 0.50:
        # Encrypt using CBC
        pass
    else:
        # Encrypt using EBC
        pass


if __name__ == '__main__':
    encryption_oracle(b'ASDFASDFASDF')
